using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using CrudAPI.ModelHelper;
using CrudAPI.Models;
using CrudLib.DataConnection;
using CrudLib.Entites;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Repositories.RepositoriesInterfaces;

namespace CrudAPI.Controllers
{
    [Route("[controller]")]
    [ApiController]
    public class ProductController : ControllerBase
    {
        private readonly IProductRepo repo;
        private readonly AppDBContext db;
        private readonly IHostingEnvironment hostingEnvironment;

        public ProductController(IProductRepo repo, AppDBContext db,
            IHostingEnvironment hostingEnvironment)
        {
            this.repo = repo;
            this.db = db;
            this.hostingEnvironment = hostingEnvironment;
        }


        [HttpGet("{id}")]
        public IActionResult GetBy(int id)
        {
            try
            {
                ProductModel model = repo.GetById(id).ToModel();
                return Ok(model);
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex);
            }
        }
        //GET   product
        //GET   product?id=1
        [HttpGet]
        public IActionResult GetAll()
        {
            try
            {
                //var file = Path.Combine(hostingEnvironment.WebRootPath,"/Content/");
                //string uploadsfolder = System.IO.Path.GetDirectoryName(hostingEnvironment.ApplicationName);
                //AppContext.BaseDirectory.Substring(0, AppContext.BaseDirectory.IndexOf("bin"));
                // $"{this.Request.Scheme}://{this.Request.Host}{this.Request.PathBase}";
                var file = Path.Combine(hostingEnvironment.WebRootPath, "images\\");


                //string path = Path.Combine(System.Web.HttpRuntime.AppDomainAppPath, "dataset.csv");
                List<ProductModel> models = repo.GetProducts().ToModelList();
                models.ForEach(v => v.fPhoto = file + v.fPhoto);
               
                return Ok(models);
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex);
            }
        }
        //[HttpPost, DisableRequestSizeLimit]
        //public ActionResult UploadFile()
        //{
        //    try
        //    {
        //        var file = Request.Form.Files[0];
        //        string folderName = "images";
        //        string webRootPath = hostingEnvironment.WebRootPath;
        //        string newPath = Path.Combine(webRootPath, folderName);
        //        if (!Directory.Exists(newPath))
        //        {
        //            Directory.CreateDirectory(newPath);
        //        }
        //        if (file.Length > 0)
        //        {
        //            string fileName = ContentDispositionHeaderValue.Parse(file.ContentDisposition).FileName.Trim('"');
        //            string fullPath = Path.Combine(newPath, fileName);
        //            using (var stream = new FileStream(fullPath, FileMode.Create))
        //            {
        //                file.CopyTo(stream);
        //            }
        //        }
        //        return Ok("Upload Successful.");
        //    }
        //    catch (System.Exception ex)
        //    {
        //        return StatusCode(408, ex.Message);
        //    }
        //}
        //protected static string GetBase64StringForImage(string imgPath)
        //{
        //    byte[] imageBytes = System.IO.File.ReadAllBytes(imgPath);
        //    string base64String = Convert.ToBase64String(imageBytes);
        //    return base64String;
        //}

        //create
        [HttpPost]
        public IActionResult Create([FromForm]ProductModel model)
        {
            try
            {
                ////Product entity= repo.Add(model.ToEntity());
                //  return Created($"/Product/{entity.Id}", entity);
                string uniqueFileName = null;
                if (model.Photo != null)
                {
                    string uploadsfolder = Path.Combine(hostingEnvironment.WebRootPath, "images");
                    //for unique id 
                    uniqueFileName = Guid.NewGuid().ToString() + "_" + model.Photo.FileName;
                    string filepath = Path.Combine(uploadsfolder, uniqueFileName);
                    model.Photo.CopyTo(new FileStream(filepath, FileMode.Create));
                }

                var Product = new Product
                {
                    Name = model.Name,
                    Details = model.Details,
                    Price = model.Price,
                    Type = model.Type,
                    Photo = uniqueFileName
                };
                repo.Add(Product);
                repo.save();
                return Ok();
                //return Created($"/Product/{entity.Id}", repo.save());
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex);
            }
        }

        //put <- Update
        [HttpPut("{id}")]
        public IActionResult Edit(int id, ProductModel model)
        {
            try
            {
                var d = repo.GetById(id);
                if (model.Name != null && model.Details != null && model.Price != 0
                    && model.Type != null)
                {
                    d.Name = model.Name;
                    d.Details = model.Details;
                    d.Price = model.Price;
                    d.Type = model.Type;
                }

                repo.Update(id, d);
                repo.save();
                return Ok();
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex);
            }
        }

        //delete the 
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
            try
            {
                repo.Remove(id);
                repo.save();
                return StatusCode(200);
                //Product entity = repo.Delete(id);
                //return Ok(entity);
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex);
            }
        }

    }

    //public interface IPathProvider
    //{
    //    string MapPath(string path);
    //}

    //public class PathProvider : IPathProvider
    //{
    //    private IHostingEnvironment _hostingEnvironment;

    //    public PathProvider(IHostingEnvironment environment)
    //    {
    //        _hostingEnvironment = environment;
    //    }

    //    public string MapPath(string path)
    //    {
    //        var filePath = Path.Combine(_hostingEnvironment.WebRootPath, path);
    //        return filePath;
    //    }
    //}
}







         






         using CrudAPI.Models;
using CrudLib.Entites;
using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace CrudAPI.ModelHelper
{
    public static class Helper
    {
        public static Product ToEntity(this ProductModel model)
        {
            return new Product { Id = model.Id, Details = model.Details, Name = model.Name,Price=model.Price, Type=model.Type, Photo=model.Photo.ToString()};
        }
        public static ProductModel ToModel(this Product entity)
        {
            return new ProductModel { Id = entity.Id, Details = entity.Details, Name = entity.Name,Price=entity.Price,Type=entity.Type,fPhoto=entity.Photo};
        }


        public static List<ProductModel> ToModelList(this List<Product> entitiesList)
        {
            List<ProductModel> modelsList = new List<ProductModel>();
            foreach (var entity in entitiesList)
            {
                modelsList.Add(entity.ToModel());
            }
            modelsList.TrimExcess();
            return modelsList;
        }


    }
}
